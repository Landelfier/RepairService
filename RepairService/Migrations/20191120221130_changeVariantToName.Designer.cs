// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RepairService.Models;

namespace RepairService.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20191120221130_changeVariantToName")]
    partial class changeVariantToName
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("RepairService.Models.AdditionalOptions", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Cost")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Additionals");
                });

            modelBuilder.Entity("RepairService.Models.AdditionalsFlat", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AdditionalOptionsID")
                        .HasColumnType("int");

                    b.Property<int>("FlatID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("AdditionalOptionsID");

                    b.HasIndex("FlatID");

                    b.ToTable("AdditionalsFlat");
                });

            modelBuilder.Entity("RepairService.Models.BaseSettings", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Cost")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("purpose")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("BaseSettings");
                });

            modelBuilder.Entity("RepairService.Models.Color", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ColorName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Color");
                });

            modelBuilder.Entity("RepairService.Models.Flat", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("BathroomID")
                        .HasColumnType("int");

                    b.Property<int>("DoorNumber")
                        .HasColumnType("int");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<int?>("KitchenID")
                        .HasColumnType("int");

                    b.Property<int>("RoomNumber")
                        .HasColumnType("int");

                    b.Property<int?>("RoomsID")
                        .HasColumnType("int");

                    b.Property<int>("Square")
                        .HasColumnType("int");

                    b.Property<int?>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("BathroomID");

                    b.HasIndex("KitchenID");

                    b.HasIndex("RoomsID");

                    b.HasIndex("UserID");

                    b.ToTable("Flats");
                });

            modelBuilder.Entity("RepairService.Models.Material", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Cost")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Purpose")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Materials");
                });

            modelBuilder.Entity("RepairService.Models.MaterialColors", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ColorID")
                        .HasColumnType("int");

                    b.Property<int>("MaterialID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ColorID");

                    b.HasIndex("MaterialID");

                    b.ToTable("MaterialColors");
                });

            modelBuilder.Entity("RepairService.Models.RoomSettings", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BaseboardID")
                        .HasColumnType("int");

                    b.Property<int>("DoorsID")
                        .HasColumnType("int");

                    b.Property<int>("FloorID")
                        .HasColumnType("int");

                    b.Property<int>("PowerSocketsID")
                        .HasColumnType("int");

                    b.Property<int>("WallsID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("BaseboardID");

                    b.HasIndex("DoorsID");

                    b.HasIndex("FloorID");

                    b.HasIndex("PowerSocketsID");

                    b.HasIndex("WallsID");

                    b.ToTable("RoomSettings");
                });

            modelBuilder.Entity("RepairService.Models.SettingsColor", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BaseSettingsID")
                        .HasColumnType("int");

                    b.Property<int>("ColorID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("BaseSettingsID");

                    b.HasIndex("ColorID");

                    b.ToTable("SettingsColor");
                });

            modelBuilder.Entity("RepairService.Models.User", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Login")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("RepairService.Models.AdditionalsFlat", b =>
                {
                    b.HasOne("RepairService.Models.AdditionalOptions", "AdditionalOptions")
                        .WithMany("AdditionalsFlats")
                        .HasForeignKey("AdditionalOptionsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RepairService.Models.Flat", "Flat")
                        .WithMany("Additionals")
                        .HasForeignKey("FlatID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RepairService.Models.Flat", b =>
                {
                    b.HasOne("RepairService.Models.BaseSettings", "Bathroom")
                        .WithMany()
                        .HasForeignKey("BathroomID");

                    b.HasOne("RepairService.Models.BaseSettings", "Kitchen")
                        .WithMany()
                        .HasForeignKey("KitchenID");

                    b.HasOne("RepairService.Models.RoomSettings", "Rooms")
                        .WithMany()
                        .HasForeignKey("RoomsID");

                    b.HasOne("RepairService.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID");
                });

            modelBuilder.Entity("RepairService.Models.MaterialColors", b =>
                {
                    b.HasOne("RepairService.Models.Color", "color")
                        .WithMany("MaterialColors")
                        .HasForeignKey("ColorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RepairService.Models.Material", "Material")
                        .WithMany("MaterialColors")
                        .HasForeignKey("MaterialID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RepairService.Models.RoomSettings", b =>
                {
                    b.HasOne("RepairService.Models.Material", "Baseboard")
                        .WithMany("Baseboards")
                        .HasForeignKey("BaseboardID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RepairService.Models.Material", "Doors")
                        .WithMany("Doors")
                        .HasForeignKey("DoorsID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RepairService.Models.Material", "Floor")
                        .WithMany("Floors")
                        .HasForeignKey("FloorID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RepairService.Models.Material", "PowerSockets")
                        .WithMany("PowerSockets")
                        .HasForeignKey("PowerSocketsID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RepairService.Models.Material", "Walls")
                        .WithMany("Walls")
                        .HasForeignKey("WallsID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("RepairService.Models.SettingsColor", b =>
                {
                    b.HasOne("RepairService.Models.BaseSettings", "BaseSettings")
                        .WithMany("SettingsColors")
                        .HasForeignKey("BaseSettingsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RepairService.Models.Color", "color")
                        .WithMany()
                        .HasForeignKey("ColorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
